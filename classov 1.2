#include <iostream>
#include <vector>
#include <algorithm>

class Matrix {
public:
    Matrix(const std::vector<std::vector<int>>& matrix) : matrix_(matrix) {}

    void rotate90DegreesClockwise() {
        int n = matrix_.size();
      
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                std::swap(matrix_[i][j], matrix_[j][i]);
            }
        }
    
        for (int i = 0; i < n; ++i) {
            std::reverse(matrix_[i].begin(), matrix_[i].end());
        }
    }

    void print() const {
        for (const auto& row : matrix_) {
            for (int val : row) {
                std::cout << val << ' ';
            }
            std::cout << '\n';
        }
    }

private:
    std::vector<std::vector<int>> matrix_;
};

int main() {
    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    
    Matrix mat(matrix);
    
    mat.rotate90DegreesClockwise();
    
    std::cout << "\nRotated:\n";
    mat.print();
    
    return 0;
}
